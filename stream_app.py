"""
PR√âDICTION DE CHURN CLIENT - APPLICATION STREAMLIT

Ce script cr√©e une application web interactive pour la pr√©diction
du churn client, l'analyse des facteurs et la g√©n√©ration de recommandations.

Pour ex√©cuter cette application:
1. Sauvegardez ce code dans un fichier nomm√© app.py
2. Ex√©cutez la commande: streamlit run app.py
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import joblib
import os

# Configuration de la page
st.set_page_config(page_title="Pr√©diction du Churn Client", page_icon="üìä", layout="wide")

# Titre principal
st.title("üíº Dashboard de Pr√©diction du Churn Client")
st.markdown("""
Cette application vous permet d'analyser les risques de churn (d√©part) de vos clients 
et de g√©n√©rer des recommandations pour am√©liorer la r√©tention.
""")

# Sidebar pour la navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Choisissez une page:", 
                       ["Vue d'ensemble", "Analyse des Facteurs", "Segmentation des Clients", 
                        "Pr√©dictions Individuelles", "Recommandations"])

# Fonction pour charger les donn√©es
@st.cache_data
def load_data():
    try:
        # Essayer d'abord de charger les donn√©es depuis une URL
        url = "https://raw.githubusercontent.com/IBM/telco-customer-churn-on-icp4d/master/data/Telco-Customer-Churn.csv"
        df = pd.read_csv(url)
        return df
    except:
        # Si √ßa ne fonctionne pas, essayer de charger depuis un fichier local
        try:
            df = pd.read_csv("Telco-Customer-Churn.csv")
            return df
        except:
            st.error("Impossible de charger les donn√©es. Veuillez t√©l√©charger le fichier Telco-Customer-Churn.csv.")
            return None

# Fonction pour charger le mod√®le
@st.cache_resource
def load_model():
    try:
        # Charger le mod√®le
        model_info = joblib.load('models/churn_prediction_model.pkl')
        return model_info
    except:
        st.error("Mod√®le non trouv√©. Veuillez d'abord ex√©cuter le script principal pour entra√Æner et sauvegarder le mod√®le.")
        return None

# Fonction pour pr√©traiter les donn√©es
def preprocess_data(df):
    # Copie du dataframe
    df_processed = df.copy()
    
    # Conversion de TotalCharges en num√©rique
    df_processed['TotalCharges'] = pd.to_numeric(df_processed['TotalCharges'], errors='coerce')
    
    # Imputation des valeurs manquantes
    if df_processed['TotalCharges'].isnull().sum() > 0:
        mask = df_processed['TotalCharges'].isna()
        df_processed.loc[mask, 'TotalCharges'] = df_processed.loc[mask, 'MonthlyCharges'] * df_processed.loc[mask, 'tenure']
    
    # Feature Engineering
    df_processed['tenure_group'] = pd.cut(
        df_processed['tenure'], 
        bins=[0, 12, 24, 36, 48, 60, np.inf],
        labels=['0-1 an', '1-2 ans', '2-3 ans', '3-4 ans', '4-5 ans', '5+ ans']
    )
    
    df_processed['avg_monthly_spend'] = df_processed['TotalCharges'] / df_processed['tenure'].replace(0, 1)
    
    # Fonction pour compter les services
    def count_services(row):
        count = 0
        if row['PhoneService'] == 'Yes':
            count += 1
            if row['MultipleLines'] == 'Yes':
                count += 1
        
        if row['InternetService'] != 'No':
            count += 1
            services = ['OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 
                       'TechSupport', 'StreamingTV', 'StreamingMovies']
            for service in services:
                if row[service] == 'Yes':
                    count += 1
        
        return count
    
    df_processed['num_services'] = df_processed.apply(count_services, axis=1)
    
    df_processed['high_risk_customer'] = ((df_processed['Contract'] == 'Month-to-month') & 
                                         (df_processed['tenure'] < 12)).astype(int)
    
    monthly_threshold = df_processed['MonthlyCharges'].quantile(0.75)
    df_processed['high_charges'] = (df_processed['MonthlyCharges'] > monthly_threshold).astype(int)
    
    df_processed['service_value_ratio'] = df_processed['num_services'] / df_processed['MonthlyCharges']
    
    # Encodage de la variable cible si pr√©sente
    if 'Churn' in df_processed.columns:
        df_processed['Churn_binary'] = df_processed['Churn'].map({'Yes': 1, 'No': 0})
    
    return df_processed

# Fonction pour pr√©dire le churn
def predict_churn(model_info, customer_data):
    # R√©cup√©ration du mod√®le et du pr√©processeur
    model = model_info['model']
    preprocessor = model_info['preprocessor']
    
    # Pr√©traitement des donn√©es
    X_processed = preprocessor.transform(customer_data)
    
    # Pr√©diction des probabilit√©s
    churn_probabilities = model.predict_proba(X_processed)[:, 1]
    
    # Ajout des probabilit√©s au dataframe
    result_df = customer_data.copy()
    result_df['churn_probability'] = churn_probabilities
    
    # Segmentation par niveau de risque
    result_df['risk_segment'] = pd.cut(
        result_df['churn_probability'],
        bins=[0, 0.3, 0.7, 1.0],
        labels=['Faible Risque', 'Risque Moyen', 'Risque √âlev√©']
    )
    
    return result_df

# Chargement des donn√©es et du mod√®le
df = load_data()
model_info = load_model()

# V√©rification que les donn√©es et le mod√®le sont charg√©s
if df is None or model_info is None:
    st.warning("Impossible de continuer sans les donn√©es et le mod√®le.")
    st.stop()

# Pr√©traitement des donn√©es
df_processed = preprocess_data(df)

# Page: Vue d'ensemble
if page == "Vue d'ensemble":
    st.header("üìà Vue d'ensemble du Churn Client")
    
    # Statistiques g√©n√©rales
    col1, col2, col3 = st.columns(3)
    
    # Calcul du taux de churn
    churn_rate = df[df['Churn'] == 'Yes'].shape[0] / df.shape[0] * 100
    
    with col1:
        st.metric("Nombre total de clients", df.shape[0])
    
    with col2:
        st.metric("Taux de churn global", f"{churn_rate:.1f}%")
    
    with col3:
        st.metric("Performance du mod√®le (AUC)", f"{model_info['metrics']['auc']:.4f}")
    
    # Distribution du churn
    st.subheader("Distribution du Churn")
    churn_counts = df['Churn'].value_counts().reset_index()
    churn_counts.columns = ['Statut', 'Nombre de Clients']
    
    fig = px.pie(churn_counts, values='Nombre de Clients', names='Statut', 
                title="Distribution du Churn",
                color_discrete_sequence=px.colors.qualitative.Safe)
    fig.update_traces(textposition='inside', textinfo='percent+label')
    st.plotly_chart(fig, use_container_width=True)
    
    # Churn par type de contrat
    st.subheader("Churn par Type de Contrat")
    contract_churn = df.groupby(['Contract', 'Churn']).size().reset_index(name='count')
    
    fig = px.bar(contract_churn, x='Contract', y='count', color='Churn',
                title="Churn par Type de Contrat",
                color_discrete_sequence=px.colors.qualitative.Safe,
                barmode='group')
    st.plotly_chart(fig, use_container_width=True)
    
    # Relation entre anciennet√© et charges mensuelles
    st.subheader("Relation entre Anciennet√© et Charges Mensuelles")
    fig = px.scatter(df, x='tenure', y='MonthlyCharges', color='Churn',
                    title="Relation entre Anciennet√© et Charges Mensuelles",
                    color_discrete_sequence=px.colors.qualitative.Safe)
    st.plotly_chart(fig, use_container_width=True)

# Page: Analyse des Facteurs
elif page == "Analyse des Facteurs":
    st.header("üîç Analyse des Facteurs de Churn")
    
    # Importance des caract√©ristiques
    st.subheader("Importance des Caract√©ristiques")
    
    # R√©cup√©ration des importances de caract√©ristiques
    feature_importance = model_info.get('feature_importance')
    
    if feature_importance is not None:
        # Affichage des 15 caract√©ristiques les plus importantes
        top_features = feature_importance.head(15)
        fig = px.bar(top_features, y='Feature', x='Importance', 
                    title="Top 15 des Caract√©ristiques Importantes",
                    orientation='h')
        fig.update_layout(yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig, use_container_width=True)
    else:
        # Si les importances ne sont pas dans le mod√®le, les recalculer
        st.warning("Informations d'importance des caract√©ristiques non disponibles dans le mod√®le.")
    
    # Analyse des variables num√©riques
    st.subheader("Analyse des Variables Num√©riques Cl√©s")
    
    # S√©lection des variables num√©riques
    numeric_cols = ['tenure', 'MonthlyCharges', 'TotalCharges']
    selected_var = st.selectbox("S√©lectionnez une variable:", numeric_cols)
    
    fig = px.histogram(df, x=selected_var, color='Churn', 
                      marginal='box', 
                      title=f"Distribution de {selected_var} par Statut de Churn",
                      color_discrete_sequence=px.colors.qualitative.Safe)
    st.plotly_chart(fig, use_container_width=True)
    
    # Analyse des variables cat√©gorielles
    st.subheader("Analyse des Variables Cat√©gorielles")
    
    # S√©lection des variables cat√©gorielles principales
    cat_cols = ['Contract', 'PaymentMethod', 'InternetService', 'TechSupport', 'OnlineSecurity']
    selected_cat = st.selectbox("S√©lectionnez une variable cat√©gorielle:", cat_cols)
    
    # Calcul des taux de churn par cat√©gorie
    cat_churn_rates = df.groupby([selected_cat])['Churn'].apply(lambda x: (x == 'Yes').mean() * 100).reset_index()
    cat_churn_rates.columns = [selected_cat, 'Taux de Churn (%)']
    
    fig = px.bar(cat_churn_rates, x=selected_cat, y='Taux de Churn (%)', 
                title=f"Taux de Churn par {selected_cat}",
                color='Taux de Churn (%)', color_continuous_scale='Viridis')
    st.plotly_chart(fig, use_container_width=True)

# Page: Segmentation des Clients
elif page == "Segmentation des Clients":
    st.header("üë• Segmentation des Clients par Risque")
    
    # Pr√©diction sur l'ensemble des donn√©es
    if 'Churn' in df_processed.columns:
        # Suppression de la colonne cible pour la pr√©diction
        X = df_processed.drop(['Churn', 'Churn_binary'], axis=1)
    else:
        X = df_processed.copy()
    
    # Exclusion de customerID si pr√©sent
    if 'customerID' in X.columns:
        X = X.drop('customerID', axis=1)
    
    # Pr√©diction de churn
    predictions_df = predict_churn(model_info, X)
    
    # Ajout de la colonne churn r√©elle si disponible
    if 'Churn' in df_processed.columns:
        predictions_df['actual_churn'] = df_processed['Churn_binary'].values
    
    # Distribution des segments de risque
    st.subheader("Distribution des Segments de Risque")
    
    risk_counts = predictions_df['risk_segment'].value_counts().reset_index()
    risk_counts.columns = ['Segment de Risque', 'Nombre de Clients']
    
    fig = px.pie(risk_counts, values='Nombre de Clients', names='Segment de Risque', 
                title="Distribution des Clients par Segment de Risque",
                color_discrete_sequence=['green', 'orange', 'red'])
    fig.update_traces(textposition='inside', textinfo='percent+label')
    st.plotly_chart(fig, use_container_width=True)
    
    # Analyse des caract√©ristiques par segment
    st.subheader("Caract√©ristiques par Segment de Risque")
    
    # S√©paration des clients par segment
    high_risk = predictions_df[predictions_df['risk_segment'] == 'Risque √âlev√©']
    medium_risk = predictions_df[predictions_df['risk_segment'] == 'Risque Moyen']
    low_risk = predictions_df[predictions_df['risk_segment'] == 'Faible Risque']
    
    # S√©lection des variables cl√©s pour l'analyse
    key_metrics = ['tenure', 'MonthlyCharges', 'num_services']
    selected_metric = st.selectbox("S√©lectionnez une m√©trique:", key_metrics)
    
    # Calcul des moyennes par segment
    segment_stats = predictions_df.groupby('risk_segment')[selected_metric].mean().reset_index()
    
    # Couleurs par segment
    segment_colors = {'Faible Risque': 'green', 'Risque Moyen': 'orange', 'Risque √âlev√©': 'red'}
    
    fig = px.bar(segment_stats, x='risk_segment', y=selected_metric, 
                title=f"Moyenne de {selected_metric} par Segment de Risque",
                color='risk_segment',
                color_discrete_map=segment_colors)
    st.plotly_chart(fig, use_container_width=True)
    
    # Analyse des contrats par segment
    st.subheader("Types de Contrat par Segment de Risque")
    
    # Calcul de la distribution des contrats par segment
    contract_by_segment = predictions_df.groupby(['risk_segment', 'Contract']).size().reset_index(name='count')
    segment_totals = predictions_df.groupby('risk_segment').size().reset_index(name='total')
    contract_by_segment = contract_by_segment.merge(segment_totals, on='risk_segment')
    contract_by_segment['percentage'] = contract_by_segment['count'] / contract_by_segment['total'] * 100
    
    fig = px.bar(contract_by_segment, x='risk_segment', y='percentage', color='Contract',
                title="Distribution des Types de Contrat par Segment de Risque",
                color_discrete_sequence=px.colors.qualitative.Set2,
                labels={'percentage': 'Pourcentage (%)', 'risk_segment': 'Segment de Risque'})
    st.plotly_chart(fig, use_container_width=True)
    
    # Liste des clients √† haut risque
    st.subheader("Top 10 des Clients √† Risque √âlev√©")
    
    # Triage par probabilit√© de churn d√©croissante
    high_risk_sorted = high_risk.sort_values('churn_probability', ascending=False)
    
    # Ajout de customerID si disponible
    if 'customerID' in df.columns:
        # R√©cup√©rer les customerID correspondants
        high_risk_sorted = high_risk_sorted.reset_index()
        customer_ids = df.loc[high_risk_sorted['index'], 'customerID'].values
        high_risk_sorted['customerID'] = customer_ids
        
        # S√©lection des colonnes √† afficher
        display_columns = ['customerID', 'churn_probability', 'tenure', 'Contract', 'MonthlyCharges', 'num_services']
    else:
        # Utiliser l'index comme identifiant
        high_risk_sorted = high_risk_sorted.reset_index()
        display_columns = ['index', 'churn_probability', 'tenure', 'Contract', 'MonthlyCharges', 'num_services']
    
    # Affichage des 10 premiers clients √† risque √©lev√©
    st.dataframe(high_risk_sorted[display_columns].head(10))

# Page: Pr√©dictions Individuelles
elif page == "Pr√©dictions Individuelles":
    st.header("üîÆ Pr√©dictions de Churn Individuelles")
    
    st.markdown("""
    Utilisez ce formulaire pour pr√©dire la probabilit√© de churn d'un client sp√©cifique.
    Remplissez les champs avec les informations du client pour obtenir une pr√©diction personnalis√©e.
    """)
    
    # Interface pour entrer les donn√©es du client
    st.subheader("Informations du Client")
    
    col1, col2 = st.columns(2)
    
    with col1:
        gender = st.selectbox("Genre", ["Male", "Female"])
        senior = st.selectbox("Senior Citizen", ["No", "Yes"])
        partner = st.selectbox("Partenaire", ["No", "Yes"])
        dependents = st.selectbox("Personnes √† charge", ["No", "Yes"])
        phone_service = st.selectbox("Service t√©l√©phonique", ["No", "Yes"])
        
        # Multiple Lines conditionnel
        if phone_service == "Yes":
            multiple_lines = st.selectbox("Lignes multiples", ["No", "Yes"])
        else:
            multiple_lines = "No phone service"
        
        internet_service = st.selectbox("Service Internet", ["DSL", "Fiber optic", "No"])
    
    with col2:
        # Services Internet conditionnels
        if internet_service != "No":
            online_security = st.selectbox("S√©curit√© en ligne", ["No", "Yes"])
            online_backup = st.selectbox("Sauvegarde en ligne", ["No", "Yes"])
            device_protection = st.selectbox("Protection de l'appareil", ["No", "Yes"])
            tech_support = st.selectbox("Support technique", ["No", "Yes"])
            streaming_tv = st.selectbox("Streaming TV", ["No", "Yes"])
            streaming_movies = st.selectbox("Streaming films", ["No", "Yes"])
        else:
            online_security = online_backup = device_protection = tech_support = streaming_tv = streaming_movies = "No internet service"
        
        contract = st.selectbox("Type de contrat", ["Month-to-month", "One year", "Two year"])
        paperless_billing = st.selectbox("Facturation √©lectronique", ["No", "Yes"])
        payment_method = st.selectbox("M√©thode de paiement", ["Electronic check", "Mailed check", "Bank transfer (automatic)", "Credit card (automatic)"])
    
    col3, col4 = st.columns(2)
    
    with col3:
        tenure = st.slider("Anciennet√© (mois)", 0, 72, 12)
    
    with col4:
        monthly_charges = st.slider("Charges mensuelles ($)", 0.0, 150.0, 50.0)
        total_charges = st.number_input("Charges totales ($)", min_value=0.0, value=tenure * monthly_charges)
    
    # Cr√©ation d'un DataFrame avec les donn√©es saisies
    customer_data = pd.DataFrame({
        'gender': [gender],
        'SeniorCitizen': [1 if senior == "Yes" else 0],
        'Partner': [partner],
        'Dependents': [dependents],
        'tenure': [tenure],
        'PhoneService': [phone_service],
        'MultipleLines': [multiple_lines],
        'InternetService': [internet_service],
        'OnlineSecurity': [online_security],
        'OnlineBackup': [online_backup],
        'DeviceProtection': [device_protection],
        'TechSupport': [tech_support],
        'StreamingTV': [streaming_tv],
        'StreamingMovies': [streaming_movies],
        'Contract': [contract],
        'PaperlessBilling': [paperless_billing],
        'PaymentMethod': [payment_method],
        'MonthlyCharges': [monthly_charges],
        'TotalCharges': [total_charges]
    })
    
    # Bouton pour effectuer la pr√©diction
    if st.button("Pr√©dire le Churn"):
        # Pr√©traitement et pr√©diction
        customer_processed = preprocess_data(customer_data)
        prediction_result = predict_churn(model_info, customer_processed)
        
        # Affichage du r√©sultat
        st.subheader("R√©sultat de la Pr√©diction")
        
        # R√©cup√©ration des r√©sultats
        churn_probability = prediction_result['churn_probability'].values[0]
        risk_segment = prediction_result['risk_segment'].values[0]
        
        # Jauge pour la probabilit√© de churn
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=churn_probability * 100,
            domain={'x': [0, 1], 'y': [0, 1]},
            title={'text': "Probabilit√© de Churn (%)"},
            gauge={
                'axis': {'range': [0, 100]},
                'bar': {'color': "darkblue"},
                'steps': [
                    {'range': [0, 30], 'color': "green"},
                    {'range': [30, 70], 'color': "orange"},
                    {'range': [70, 100], 'color': "red"}
                ],
                'threshold': {
                    'line': {'color': "red", 'width': 4},
                    'thickness': 0.75,
                    'value': churn_probability * 100
                }
            }
        ))
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Affichage du segment de risque
        risk_color = {"Faible Risque": "green", "Risque Moyen": "orange", "Risque √âlev√©": "red"}
        st.markdown(f"""
        <div style="background-color:{risk_color[risk_segment]}; padding:10px; border-radius:5px;">
            <h3 style="color:white; text-align:center;">Segment: {risk_segment}</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Facteurs contribuant au churn
        st.subheader("Principaux Facteurs de Risque")
        
        risk_factors = []
        
        # Analyse des facteurs de risque bas√©e sur les valeurs du client
        if contract == "Month-to-month":
            risk_factors.append("Contrat mensuel (plus susceptible au churn)")
        
        if tenure < 12:
            risk_factors.append("Faible anciennet√© (client r√©cent)")
        
        if payment_method == "Electronic check":
            risk_factors.append("Paiement par ch√®que √©lectronique (associ√© √† un taux de churn plus √©lev√©)")
        
        if internet_service == "Fiber optic" and (online_security == "No" or tech_support == "No"):
            risk_factors.append("Fibre optique sans services de s√©curit√©/support")
        
        if monthly_charges > 80:
            risk_factors.append("Charges mensuelles √©lev√©es")
        
        # Affichage des facteurs de risque
        if risk_factors:
            for factor in risk_factors:
                st.markdown(f"- {factor}")
        else:
            st.markdown("Aucun facteur de risque majeur identifi√©.")

# Page: Recommandations
elif page == "Recommandations":
    st.header("üí° Recommandations pour R√©duire le Churn")
    
    # Sections de recommandations
    st.subheader("Strat√©gies G√©n√©rales de R√©tention")
    
    general_recs = [
        "Mettre en place un programme de fid√©lit√© avec des r√©compenses progressives bas√©es sur l'anciennet√©",
        "Am√©liorer la qualit√© du service client et le suivi des plaintes",
        "Organiser des enqu√™tes de satisfaction r√©guli√®res pour identifier les probl√®mes avant qu'ils ne conduisent au churn",
        "D√©velopper une strat√©gie de communication personnalis√©e selon le profil de risque du client",
        "Cr√©er des offres sp√©ciales pour les p√©riodes critiques (renouvellement de contrat, premier anniversaire)"
    ]
    
    for rec in general_recs:
        st.markdown(f"- {rec}")
    
    # Recommandations par segment
    st.subheader("Strat√©gies par Segment de Risque")
    
    tab1, tab2, tab3 = st.tabs(["Clients √† Risque √âlev√©", "Clients √† Risque Moyen", "Clients √† Faible Risque"])
    
    with tab1:
        high_risk_recs = [
            "Contacter proactivement ces clients pour r√©soudre leurs probl√®mes sp√©cifiques",
            "Offrir des promotions exclusives ou r√©ductions pour prolonger leur engagement",
            "Proposer des incitations financi√®res attractives pour convertir les contrats mensuels en contrats √† long terme",
            "Mettre en place un suivi personnalis√© et r√©gulier par un conseiller d√©di√©",
            "Proposer une √©valuation gratuite de leurs besoins actuels et futurs",
            "Offrir des services √† valeur ajout√©e sans frais suppl√©mentaires pendant une p√©riode limit√©e"
        ]
        
        for rec in high_risk_recs:
            st.markdown(f"- {rec}")
    
    with tab2:
        medium_risk_recs = [
            "Envoyer des enqu√™tes de satisfaction cibl√©es pour identifier les points d'am√©lioration",
            "Mettre en place un programme d'engagement r√©gulier (newsletters, webinaires, √©v√©nements)",
            "Offrir des options de mise √† niveau de service √† prix r√©duit",
            "Proposer des offres de cross-selling adapt√©es √† leur profil d'utilisation",
            "D√©velopper un programme de parrainage avec des avantages pour le client et ses filleuls"
        ]
        
        for rec in medium_risk_recs:
            st.markdown(f"- {rec}")
    
    with tab3:
        low_risk_recs = [
            "Maintenir une relation r√©guli√®re via des communications personnalis√©es",
            "R√©compenser leur fid√©lit√© par des avantages exclusifs",
            "Les solliciter pour des tests de nouveaux produits/services",
            "D√©velopper un programme d'ambassadeurs pour ces clients fid√®les",
            "Proposer des offres premium pour augmenter leur valeur √† vie (lifetime value)"
        ]
        
        for rec in low_risk_recs:
            st.markdown(f"- {rec}")
    
    # Am√©liorations des services
    st.subheader("Am√©liorations des Services et Produits")
    
    service_recs = [
        "Revoir et am√©liorer les offres et bundles de services pour mieux r√©pondre aux besoins clients",
        "Am√©liorer la qualit√© et la fiabilit√© du service de fibre optique",
        "Renforcer les services de s√©curit√© en ligne et de support technique",
        "D√©velopper de nouvelles fonctionnalit√©s bas√©es sur les retours clients",
        "Optimiser le rapport qualit√©/prix des services les plus sujets au churn",
        "√âtablir des normes de qualit√© de service plus strictes et les communiquer aux clients"
    ]
    
    for rec in service_recs:
        st.markdown(f"- {rec}")
    
    # Optimisation des processus
    st.subheader("Optimisation des Processus")
    
    process_recs = [
        "Simplifier les processus de facturation et de paiement",
        "Am√©liorer la transparence des contrats et des conditions de service",
        "Faciliter les d√©marches de renouvellement de contrat",
        "Mettre en place un syst√®me d'alerte pr√©coce pour identifier les clients √† risque",
        "Optimiser le processus de gestion des r√©clamations pour r√©soudre les probl√®mes plus rapidement"
    ]
    
    for rec in process_recs:
        st.markdown(f"- {rec}")

# Pied de page
st.sidebar.markdown("---")
st.sidebar.info("""
### Aide
Cette application utilise un mod√®le de Machine Learning pour pr√©dire quels clients sont susceptibles de r√©silier leur abonnement.

Pour utiliser l'application:
1. Explorez les diff√©rentes pages via le menu de navigation
2. Utilisez la page "Pr√©dictions Individuelles" pour analyser un client sp√©cifique
3. Consultez les recommandations pour r√©duire le churn
""")
